<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hydevcode</title><link>https://hydevcode.github.io/</link><description>Recent content on Hydevcode</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Hydevcode All rights reserved. 禁止转载。如需引用，请注明文章链接。</copyright><lastBuildDate>Thu, 22 May 2025 01:59:41 +0800</lastBuildDate><atom:link href="https://hydevcode.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>RT-Thread中如何对其他BSP进行瘦身并添加软件包</title><link>https://hydevcode.github.io/p/rt-thread%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AF%B9%E5%85%B6%E4%BB%96bsp%E8%BF%9B%E8%A1%8C%E7%98%A6%E8%BA%AB%E5%B9%B6%E6%B7%BB%E5%8A%A0%E8%BD%AF%E4%BB%B6%E5%8C%85/</link><pubDate>Thu, 22 May 2025 01:59:41 +0800</pubDate><guid>https://hydevcode.github.io/p/rt-thread%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AF%B9%E5%85%B6%E4%BB%96bsp%E8%BF%9B%E8%A1%8C%E7%98%A6%E8%BA%AB%E5%B9%B6%E6%B7%BB%E5%8A%A0%E8%BD%AF%E4%BB%B6%E5%8C%85/</guid><description>&lt;h1 id="介绍">介绍
&lt;/h1>&lt;p>瘦身的目的就是减少整个仓库的文件体积，为此，我们需要分析当前各个 BSP 中占用空间较大的部分&lt;/p>
&lt;p>在此之前，已有开发者发布了一篇详细的瘦身指南，具体在下方链接可以查看:
&lt;a class="link" href="https://club.rt-thread.org/ask/article/4839095b91c2f849.html" target="_blank" rel="noopener"
>RT-Thread-rt-thread主仓 BSP瘦身指南RT-Thread问答社区 - RT-Thread&lt;/a>&lt;/p>
&lt;p>这里以NXP的为例子，我们可以用SpaceSniffer查看该目录的文件占用&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250519154446.png" alt="" />&lt;/p>
&lt;p>从图中可以看出，仓库中占用空间较多的主要是一些 library 及与 SDK 相关的内容。这些库本身并不直接依赖 RT-Thread 内核，而是通过适配层与系统进行对接。因此，我们可以将这些库拆分出来，分别制作成独立的软件包进行管理和维护，以减少 BSP 体积。&lt;/p>
&lt;h1 id="开始操作">开始操作
&lt;/h1>&lt;p>为了方便演示瘦身的具体操作步骤，我们以图中右下角的MCX为例进行说明，该BSP适配的比较标准，适合作为示例，能够更直观地展示瘦身的原理和过程&lt;/p>
&lt;p>瘦身主要分为三个步骤，首先是创建对应的SDK仓库，然后是修改Package软件包索引仓库，最后是修改RT-Thread主仓仓库中的BSP&lt;/p>
&lt;p>瘦身本质的核心就是将占用比较多的文件或者库分成单独的仓库&lt;/p>
&lt;p>这一套流程不仅适用于 BSP 的瘦身，同样适用于向 RT-Thread 生态中添加新的软件包&lt;/p>
&lt;p>本文中提交PR的步骤可以参考
&lt;a class="link" href="https://club.rt-thread.org/ask/article/62273896dee18b09.html" target="_blank" rel="noopener"
>RT-Thread-【RT-Thread】记录一次对主仓的bsp进行修复并提交pr的总结RT-Thread问答社区 - RT-Thread&lt;/a>&lt;/p>
&lt;h2 id="创建sdk软件包仓库">创建SDK（软件包）仓库
&lt;/h2>&lt;p>在创建仓库前，首先需要分析当前目录结构，明确哪些内容需要拆分成独立仓库&lt;/p>
&lt;p>来到nxp/mcxa目录下，可以看到该目录下包含两个 BSP，以及一个位于 BSP 外部的 &lt;code>Library&lt;/code> 文件夹&lt;/p>
&lt;p>其中&lt;code>Library&lt;/code> 中包含一个通用的 &lt;strong>CMSIS&lt;/strong> 文件夹，这是两个 BSP 在编译过程中都会引用的公共部分，需要作为通用 &lt;strong>SDK&lt;/strong> 提取出来&lt;/p>
&lt;p>&lt;code>drivers&lt;/code> 是用于适配 RT-Thread 的驱动代码，属于 BSP 的一部分，不需要拆分为软件包&lt;/p>
&lt;p>此外还有两个 BSP 专属的库文件夹，这两部分可以&lt;strong>合并为一个软件包&lt;/strong>，并通过 &lt;code>SConstruct&lt;/code> 文件中的配置来控制编译时启用哪个文件夹，以适配不同的 BSP&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250519163959.png" alt="" />&lt;/p>
&lt;p>（注：除了library之类的代码，如果还有对应bsp需要的工具或文件的话，比如IMX6ULL-Smart这个bsp目录下还有个emmc文件夹，那么可以把其一起放到对应的软件包文件夹下 ）&lt;/p>
&lt;p>在明确library库中的内容后，我这里打算分别创建出nxp-mcx-cmsis和nxp-mcx-series两个仓库&lt;/p>
&lt;h3 id="制作软件包并测试">制作软件包并测试
&lt;/h3>&lt;p>这里可以在package下创建文件夹模拟测试下是否能通过编译：&lt;/p>
&lt;p>以 &lt;code>frdm-mcxa156&lt;/code> 为例,来到其目录下，打开env，输入pkgs &amp;ndash;update让他创建出Packages文件夹，接下来在这个文件夹下分别创建出nxp-mcx-cmsis和nxp-mcx-series的文件夹&lt;/p>
&lt;p>将原 &lt;code>Library&lt;/code> 文件夹中的 &lt;code>cmsis&lt;/code> 目录内容放到nxp-mcx-cmsis中(可以理解为将 &lt;code>cmsis&lt;/code> 改名为 &lt;code>nxp-mcx-cmsis&lt;/code>)，另外两个 BSP 专属的库文件夹，则统一放入 &lt;code>nxp-mcx-series&lt;/code> 软件包中，后续可通过 &lt;code>SConstruct&lt;/code> 控制编译时选择具体子目录，以适配不同 BSP。最后的结果如下图所示，然后原本的cmsis和库文件就可以删除了。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250519171830.png" alt="" />&lt;/p>
&lt;h3 id="scons是如何编译需要的c文件的">scons是如何编译需要的.c文件的
&lt;/h3>&lt;p>在默认情况下，SCons 的编译流程主要依赖于 &lt;code>SConscript&lt;/code> 文件中指定的路径来递归查找 BSP 目录下所有需要编译的 &lt;code>.c&lt;/code> 文件。&lt;/p>
&lt;p>如果源码目录结构中存在多层嵌套，&lt;strong>那么每一层目录下都需要有一个 &lt;code>SConscript&lt;/code> 文件&lt;/strong>。因为 SCons 会从上层向下逐级查找 &lt;code>SConscript&lt;/code>，并通过它们逐层递归构建编译路径。&lt;/p>
&lt;p>一旦某一层目录中缺失了 &lt;code>SConscript&lt;/code>，则该路径下更深层的 &lt;code>.c&lt;/code> 文件将无法被发现和编译，从而导致编译不完整或链接错误。&lt;/p>
&lt;p>但是从上图中可以发现nxp-mcx-series下是少了SConscript的，这会导致里面的文件编译不进去，于是我们可以手动给它加上&lt;/p>
&lt;p>其中的内容可以参考下图，每个专属的库都对应的一个SOC宏定义，当这个判断到这个宏定义后就会把对应的库中的SConscript中指定的C文件加入到构建中&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250519172251.png" alt="" />&lt;/p>
&lt;p>然后检查下对应的库中的SConscript，我这里是MCXA156,可以打开检查下MCXA156\SConscript&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250519173049.png" alt="" />&lt;/p>
&lt;p>发现CMSIS也包含在里面，那么把这个CMSIS改成nxp-mcx-cmsis是不是nxp-mcx-cmsis就不用创建SConscript了，实际上这样会报错，在拉取软件包的时候由于用的是最新的代码，那么nxp-mcx-cmsis的命名就会变成nxp-mcx-cmsis_latest,这时就会报错&lt;/p>
&lt;p>为了方便可能出现的不同版本，同时也让软件包更整洁一点，还是要在nxp-mcx-cmsis创建一个SConscript,内容为下图所示&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250519173715.png" alt="" />&lt;/p>
&lt;p>那么原来的nxp-mcx-series中的SConscript则删掉 &lt;em>&lt;strong>cwd + &amp;lsquo;/../CMSIS/Core/Include&amp;rsquo;,&lt;/strong>&lt;/em> 即可&lt;/p>
&lt;p>这样nxp-mcx-cmsis和nxp-mcx-series两个软件包就做好了&lt;/p>
&lt;p>接下来是把原本bsp查找library路径修改一下就好了&lt;/p>
&lt;p>前面提到，SCons 的构建过程主要依赖于各级目录下的 &lt;code>SConscript&lt;/code> 文件来组织和管理需要编译的 &lt;code>.c&lt;/code> 文件。那么，SCons 最开始是从哪里开始执行的呢？&lt;/p>
&lt;p>实际上，&lt;strong>SCons 会从BSP根目录下的 &lt;code>SConstruct&lt;/code> 文件开始执行&lt;/strong>，这是整个构建系统的入口文件。&lt;code>SConstruct&lt;/code> 正常情况下只会从bsp根目录下开始搜索，进而递归来添加该 BSP 所需编译的所有源文件。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250519174711.png" alt="" />&lt;/p>
&lt;p>如果需要搜索bsp目录外的文件夹，则需要指定对应的目录，比如说上图，首先objs添加了RTT内核，其次是drivers驱动，最后是library里的库文件&lt;/p>
&lt;p>所以为了适配软件包，则需要把这一行添加库文件夹的代码去掉&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">objs.extend(SConscript(os.path.join(libraries_path_prefix, rtconfig.BSP_LIBRARY_TYPE, &amp;#39;SConscript&amp;#39;)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这时候又由于默认会自动搜索BSP根目录下所有文件夹包括packages里的SConscript，所以软件包方面不用额外添加路径&lt;/p>
&lt;p>这时候就可以尝试编译一下&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250519175558.png" alt="" />&lt;/p>
&lt;p>结果可以看到库文件的路径来自于Packages，编译也是通过的&lt;/p>
&lt;h3 id="提交到github仓库">提交到github仓库
&lt;/h3>&lt;p>首先，需要在 GitHub 上创建两个仓库，并分别命名为 &lt;strong>nxp-mcx-cmsis&lt;/strong> 和 &lt;strong>nxp-mcx-series&lt;/strong>，同时记录下这两个仓库对应的 Git 拉取地址。&lt;/p>
&lt;p>接着，在本地打开 &lt;strong>packages&lt;/strong> 文件夹内对应这两个文件夹路径的 Git Bash 窗口。&lt;/p>
&lt;p>最后，按照以下命令将 SDK 提交至远端仓库中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#初始化仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#设置远端仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add 拉取对应仓库用的git地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#拉取代码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git pull origin master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#将修改的文件添加到暂存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#将暂存区的文件提交成commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit &amp;#34;First Commit&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#推送到github服务器上
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="修改package软件包索引仓库">修改Package软件包索引仓库
&lt;/h2>&lt;p>接下来是修改软件包的索引仓库，效果就是Menuconfig打开相应的宏定义即可自动下载对应的软件包&lt;/p>
&lt;p>来到软件包仓库&lt;a class="link" href="https://github.com/RT-Thread/packages" target="_blank" rel="noopener"
>GitHub - RT-Thread/packages: packages index repository for rt-thread.&lt;/a>&lt;/p>
&lt;p>首先需要将仓库Fork成自己的package仓库&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250520102853.png" alt="" />&lt;/p>
&lt;p>然后来到自己的package仓库，找到clone地址&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250520103457.png" alt="" />&lt;/p>
&lt;p>在本地找一个地方拉取一下&lt;/p>
&lt;p>&lt;em>&lt;strong>这里推荐一个package拉取的地方&lt;/strong>&lt;/em>&lt;/p>
&lt;p>正常来说，env工具本身也会拉取package，于是我们可以来到env的安装目录下，找到对应的package目录，删除后重新在该位置拉取一个package，这样在调试的时候就能随时使用到最新代码&lt;/p>
&lt;p>拉取到本地后，用vscode打开packages，然后来到peripherals\hal-sdk目录下&lt;/p>
&lt;p>找到对应bsp的文件夹，没有的话可以根据其他文件夹的命名规范来新建&lt;/p>
&lt;p>然后在bsp下创建Kconfig和package.json，如下图所示&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250521185137.png" alt="" />&lt;/p>
&lt;p>其中的内容可以参考其他sdk的配置来修改&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250522100054.png" alt="" />&lt;/p>
&lt;p>注意，这里面的Kconfig跟上面提到的SConscript有点类似，也是为了能让env找到sdk的配置，所以每个文件夹下都有&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250522100515.png" alt="" />&lt;/p>
&lt;p>将对应的配置路径填入到上层文件夹中的Kconfig即可，具体可以参考其他SDK&lt;/p>
&lt;p>全部写好后就可以提交pr了，打开git bash&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#将文件添加到暂存区
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#创建分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout -b nxp_sdk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#提交暂存区文件到commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &amp;#34;这里填写commmit描述&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#推送远端仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin nxp_sdk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>推送到github上自己的仓库后，就可以在网页端操作提交pr了&lt;/p>
&lt;p>关于软件包相关的部分详细可以参考其他的文章和视频比如&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/lt6210925/article/details/105176863?spm=1001.2014.3001.5501" target="_blank" rel="noopener"
>\[RTT\]\[ENV\]\[PACKAGE\]如何制作软件包_rtt env packages-CSDN博客&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.bilibili.com/video/av79943543" target="_blank" rel="noopener"
>Env上手指南_哔哩哔哩_bilibili&lt;/a>&lt;/p>
&lt;h2 id="修改rt-thread主仓仓库">修改RT-Thread主仓仓库
&lt;/h2>&lt;p>首先如果需要在主仓上提交代码，我们需要把仓库fork一下，然后拉取自己的RT-Thread仓库到本地即可,其步骤跟修改索引仓库一样&lt;/p>
&lt;p>在第一步的测试中，BSP 已经能够正常编译。接下来，如果要实现对应 SDK 的自动下载功能，则需要借助软件包索引仓库中的宏定义来完成。&lt;/p>
&lt;p>当使用menuconfig保存退出后，env会自动将Kconfig下开启的宏定义放到rtconfig.h中，这时如果使用了pkgs &amp;ndash;update并检测到PKG_开头的宏定义就会根据索引仓库的配置下载对应的软件包&lt;/p>
&lt;p>于是按照这个思路，首先找到这个系列的bsp都会开启的选项，然后在这个选项下面加入刚才索引仓库配置的宏定义就可以了&lt;/p>
&lt;p>如下图的例子中，我找到了一个SOC_MCX的一个config，当menuconfig保存退出后，就会自动搜索打开select中的选项，这里把sdk的config开关填进去即可&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250522101935.png" alt="" />&lt;/p>
&lt;p>到了这里，bsp的基础瘦身就完成了,接下来是添加一些提示之类的，告诉其他开发者在编译前需要输入pkgs &amp;ndash;update下载sdk&lt;/p>
&lt;p>打开当前bsp的SConscript,加入下图中的代码，作用就是检测packages目录下有没有对应的sdk文件夹,没有的话就会报错并提示&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%b8%ad%e5%a6%82%e4%bd%95%e5%af%b9%e5%85%b6%e4%bb%96BSP%e8%bf%9b%e8%a1%8c%e7%98%a6%e8%ba%ab%e5%b9%b6%e6%b7%bb%e5%8a%a0%e8%bd%af%e4%bb%b6%e5%8c%85/images/Pasted%20image%2020250522102530.png" alt="" />&lt;/p>
&lt;p>注意：软件包再拉下来的时候会自动在文件夹名后加上-latest，修改的时候不要漏了&lt;/p>
&lt;p>最后可以测试一下，把原来的文件夹删除后即可输入pkgs &amp;ndash;update下载sdk，编译通过后即可开始提交pr&lt;/p>
&lt;p>可以参考下面的链接:
&lt;a class="link" href="https://club.rt-thread.org/ask/article/62273896dee18b09.html" target="_blank" rel="noopener"
>RT-Thread-【RT-Thread】记录一次对主仓的bsp进行修复并提交pr的总结RT-Thread问答社区 - RT-Thread&lt;/a>&lt;/p>
&lt;h1 id="总结">总结
&lt;/h1>&lt;p>这里总结下步骤
首先，需要创建对应的SDK仓库；
这个仓库会在pkgs &amp;ndash;update时下载到packages文件夹里，然后scons编译工具会根据其中的SConscript来决定编译哪个c文件&lt;/p>
&lt;p>接着，修改Package软件包索引仓库；
这个仓库主要是用来链接软件包的仓库，并将该软件包跟宏定义绑定，这样env才可以找到该软件包的仓库并下载下来&lt;/p>
&lt;p>最后，更新RT-Thread主仓仓库中的BSP；
为了使 BSP 在执行 &lt;strong>pkgs &amp;ndash;update&lt;/strong> 时能够正确工作，需要确保对应软件包的宏定义处于开启状态。因此，必须在 Kconfig 文件中选择一个默认开启的选项，并将该宏定义包含其中。这样一来，在通过 menuconfig 配置后，就能启用该宏定义。 （注：menuconfig 中的选项均来源于 Kconfig 文件。）&lt;/p></description></item><item><title>RT-Thread仓库的CI自动编译测试</title><link>https://hydevcode.github.io/p/rt-thread%E4%BB%93%E5%BA%93%E7%9A%84ci%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%E6%B5%8B%E8%AF%95/</link><pubDate>Tue, 08 Apr 2025 19:20:00 +0800</pubDate><guid>https://hydevcode.github.io/p/rt-thread%E4%BB%93%E5%BA%93%E7%9A%84ci%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%E6%B5%8B%E8%AF%95/</guid><description>&lt;h1 id="前言">前言
&lt;/h1>&lt;p>当我们往RT-Thread仓库提交PR代码也就是对仓库做修改的时候，来到提交的PR底下可以看到一些Build Check，如下图所示&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%bb%93%e5%ba%93%e7%9a%84CI%e8%87%aa%e5%8a%a8%e7%bc%96%e8%af%91%e6%b5%8b%e8%af%95/images/Pasted%20image%2020250403224733.png" alt="" />&lt;/p>
&lt;p>这些Check的作用就是编译与其对应的BSP，就好像本地使用scons -j4编译一样&lt;/p>
&lt;p>当所有测试通过了之后就代表在该PR中修改的代码可以正常编译所在的BSP&lt;/p>
&lt;p>如果有报错也就是编译不通过的话，那么就可以很方便的定位问题来源&lt;/p>
&lt;h1 id="怎么添加bsp的自动编译测试">怎么添加BSP的自动编译测试
&lt;/h1>&lt;p>问题来了，那么当添加了一个新的BSP的时候该如何让它也能支持自动编译呢&lt;/p>
&lt;p>来到.github目录下可以找到一个叫ALL_BSP_COMPILE.json的文件
这里面就包含了所有需要自动编译测试的bsp&lt;/p>
&lt;p>当我们添加了一个新的BSP时，只需要按照原有的格式，将BSP的路径添加到列表中即可&lt;/p>
&lt;p>但是需要注意几点&lt;/p>
&lt;p>首先，每个BSP都应该被放入正确的组中。举个例子，如果添加的是STM32F7系列的BSP，那么就应该将其路径放入相应的组。如下图的的RTT_BSP就类似于组名&lt;/p>
&lt;p>如果在现有的组中找不到合适的位置，那么就可以按照已有的格式新增一个组&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%bb%93%e5%ba%93%e7%9a%84CI%e8%87%aa%e5%8a%a8%e7%bc%96%e8%af%91%e6%b5%8b%e8%af%95/images/Pasted%20image%2020250403230111.png" alt="" />&lt;/p>
&lt;p>添加完成后可以验证一下看是否成功添加&lt;/p>
&lt;p>来到PR页面的最下方，找到刚添加的bsp对应的组名，点击链接&lt;/p>
&lt;p>这里以星火一号RT-SPARK为例子&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%bb%93%e5%ba%93%e7%9a%84CI%e8%87%aa%e5%8a%a8%e7%bc%96%e8%af%91%e6%b5%8b%e8%af%95/images/Pasted%20image%2020250408220004.png" alt="" />&lt;/p>
&lt;p>展开BSP Scons Compile即可看到bsp路径&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%bb%93%e5%ba%93%e7%9a%84CI%e8%87%aa%e5%8a%a8%e7%bc%96%e8%af%91%e6%b5%8b%e8%af%95/images/Pasted%20image%2020250408220159.png" alt="" />&lt;/p>
&lt;h1 id="如何在自己仓库上进行自动编译测试">如何在自己仓库上进行自动编译测试
&lt;/h1>&lt;p>(在自己仓库上编译需要修改一下仓库文件，删除.github/workflows/bsp_buildings.yml中的&lt;strong>if: github.repository_owner == &amp;lsquo;RT-Thread&amp;rsquo;&lt;/strong> 即可在自己的仓库编译测试，顺便可以把&lt;code>schedule:- cron: '0 16 * * *'&lt;/code> 也删了，这个是定时运行，时间长了仓库会有一堆编译记录，这个操作仅用于自己测试，最后提交PR代码的时候记得还原)&lt;/p>
&lt;p>首先确保RT-Thread仓库已经fork到自己仓库了(也就是类似于复制一份仓库到自己仓库中)
然后来到自己的RT-Thread仓库&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%bb%93%e5%ba%93%e7%9a%84CI%e8%87%aa%e5%8a%a8%e7%bc%96%e8%af%91%e6%b5%8b%e8%af%95/images/Pasted%20image%2020250408220636.png" alt="" />&lt;/p>
&lt;p>点击Actions,然后在左边的列表找到Build Check，在右边可以看到一个Run workflow
，按下那个绿色按钮就会开始自动对所有bsp进行编译了&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%bb%93%e5%ba%93%e7%9a%84CI%e8%87%aa%e5%8a%a8%e7%bc%96%e8%af%91%e6%b5%8b%e8%af%95/images/Pasted%20image%2020250408220606.png" alt="" />&lt;/p>
&lt;p>此时刷新一下网页会发现多出来一个棕色的Build Check，这时说明正在进行测试，只需要等待测试结束即可&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/RT-Thread%e4%bb%93%e5%ba%93%e7%9a%84CI%e8%87%aa%e5%8a%a8%e7%bc%96%e8%af%91%e6%b5%8b%e8%af%95/images/Pasted%20image%2020250408220852.png" alt="" />&lt;/p>
&lt;p>另外CI还有其他好玩的用法，结合起来做项目十分方便&lt;/p>
&lt;p>&lt;a class="link" href="https://club.rt-thread.org/ask/article/5c41835bb8ff9b41.html" target="_blank" rel="noopener"
>RT-Thread-还在担心bsp不好维护吗？快使用yml管理主线bspRT-Thread问答社区 - RT-Thread&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://club.rt-thread.org/ask/article/95e2a0f0a1517189.html" target="_blank" rel="noopener"
>RT-Thread-RT-Thread CI编译产物artifacts自动上传功能介绍RT-Thread问答社区 - RT-Thread&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://club.rt-thread.org/ask/article/8e019d0e64e1ab31.html" target="_blank" rel="noopener"
>RT-Thread-【ci】【github】【bsp】RT-THREAD所有bsp scons编译情况检查RT-Thread问答社区 - RT-Thread&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://club.rt-thread.org/ask/article/419a30e57384a239.html" target="_blank" rel="noopener"
>RT-Thread-\[github\]\[action\] RTT黑科技: 添加手动打包和编译特定bsp功能RT-Thread问答社区 - RT-Thread&lt;/a>&lt;/p></description></item><item><title>Github Pull_request_target学习笔记</title><link>https://hydevcode.github.io/p/github-pull_request_target%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 15 Mar 2025 19:20:00 +0800</pubDate><guid>https://hydevcode.github.io/p/github-pull_request_target%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;aside> 😀 由于需要在PR上用bot发送评论，所以可能需要用到pull_request_target,但是官方文档提示该触发条件有安全风险,于是研究下并做个笔记
&lt;/aside>
&lt;p>&lt;a class="link" href="https://docs.github.com/zh/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#pull_request_target" target="_blank" rel="noopener"
>触发工作流的事件 - GitHub 文档&lt;/a>&lt;/p>
&lt;p>在 GitHub Actions 中，&lt;code>pull_request&lt;/code> 和 &lt;code>pull_request_target&lt;/code> 是两种处理 Pull Request (PR) 的触发器,以下是我的理解介绍以及对比：&lt;/p>
&lt;h1 id="-什么是pull_request">📝 什么是pull_request?
&lt;/h1>&lt;ul>
&lt;li>当 &lt;strong>PR 被创建&lt;/strong>、&lt;strong>更新&lt;/strong>（新提交）或 &lt;strong>重新打开&lt;/strong> 时触发工作流&lt;/li>
&lt;li>专为 &lt;strong>处理 PR 贡献者的代码&lt;/strong> 设计&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特性&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>代码环境&lt;/strong>&lt;/td>
&lt;td>使用 &lt;strong>PR 分支的代码&lt;/strong>（即贡献者的代码）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>权限&lt;/strong>&lt;/td>
&lt;td>&lt;code>GITHUB_TOKEN&lt;/code> 默认只有 &lt;strong>读权限&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Secrets&lt;/strong>&lt;/td>
&lt;td>&lt;strong>无法访问仓库的加密 secrets&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>目标分支&lt;/strong>&lt;/td>
&lt;td>无法直接访问目标分支（如 &lt;code>main&lt;/code>）的最新代码&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>使用示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#触发条件设置↓&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pull_request:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branches: &lt;span class="o">[&lt;/span> main &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">permissions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> contents: &lt;span class="nb">read&lt;/span> &lt;span class="c1"># 显式声明最低权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> test:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: actions/checkout@v4 &lt;span class="c1"># 自动签出 PR 代码&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="-什么是pull_request_target">📝 什么是pull_request_target?
&lt;/h1>&lt;ul>
&lt;li>专门用于 &lt;strong>维护者审核 PR 时&lt;/strong> 需要 &lt;strong>高权限操作&lt;/strong> 的场景&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特性&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>代码环境&lt;/strong>&lt;/td>
&lt;td>默认使用 &lt;strong>目标分支的代码&lt;/strong>（如 &lt;code>main&lt;/code> 分支），而非 PR 代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>权限&lt;/strong>&lt;/td>
&lt;td>&lt;code>GITHUB_TOKEN&lt;/code> 默认拥有 &lt;strong>写权限&lt;/strong>（可修改仓库）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Secrets&lt;/strong>&lt;/td>
&lt;td>&lt;strong>可以访问仓库的加密 secrets&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>目标分支&lt;/strong>&lt;/td>
&lt;td>直接基于目标分支的最新代码运行&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="可能的安全风险">可能的安全风险
&lt;/h2>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/hydevcode/post/Git/Github_Pull_request_target%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/images/Pasted%20image%2020250315192253.png" alt="" />&lt;/p>
&lt;ul>
&lt;li>
&lt;p>来自官方文档https://docs.github.com/zh/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#pull_request_target&lt;/p>
&lt;p>对于由 &lt;code>pull_request_target&lt;/code> 事件触发的工作流，将授予 &lt;code>GITHUB_TOKEN&lt;/code> 读/写存储库权限，除非指定了 &lt;code>permissions&lt;/code>密钥并且工作流可以访问机密，即使从分支触发也是如此。 虽然工作流程在拉取请求的基础上下文中运行，但你应该确保不在此事件中检出、生成或运行来自拉取请求的不受信任代码。 此外，任何缓存都与基本分支共享相同的作用域。 为帮助防止缓存中毒，如果缓存内容可能已更改，则不应保存缓存。 有关详细信息，请参阅 GitHub Security Lab 网站上的“&lt;a class="link" href="https://securitylab.github.com/research/github-actions-preventing-pwn-requests" target="_blank" rel="noopener"
>保护 GitHub Actions 和工作流安全：阻止 pwn 请求&lt;/a>”。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="比如">比如：
&lt;/h3>&lt;p>由于 &lt;code>pull_request_target&lt;/code> 默认使用的是 &lt;code>main&lt;/code> 分支的代码，因此无法测试 PR 中修改的内容。为了解决这个问题，可以指定使用 PR 分支的代码，但这又会引发新的问题。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: actions/checkout@v4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ref: ${{ github.event.pull_request.head.sha }} # 显式签出 PR 代码
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当前情况： • 工作流运行在高权限环境中（可访问敏感信息） • 但执行的是来自不可信 PR 的代码 • 触发的工作流仅在提交者的分叉仓库中运行 • 攻击者可能在 PR 代码中插入恶意 CI 脚本&lt;/p>
&lt;p>安全风险主要源自于 &lt;code>pull_request_target&lt;/code> 下的工作流，因为该工作流具有读取 secrets 和写入 GITHUB_TOKEN 的权限。因此，在编写 YAML 文件时需要特别注意。&lt;/p>
&lt;p>在网上搜索到的一些解决办法可以有效提高 GitHub Actions 的安全性，具体措施如下：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>禁用凭证持久化 (persist-credentials: false)&lt;/strong>：当使用 &lt;code>actions/checkout&lt;/code> 动作时，默认情况下，GitHub 会将 GITHUB_TOKEN 写入本地的 Git 配置文件（存储在 &lt;code>.git/config&lt;/code> 中）。这意味着后续的所有 Git 操作（如 &lt;code>push&lt;/code> 或 &lt;code>pull&lt;/code>）都会自动使用这个令牌进行身份验证。然而，为了增强安全性并避免潜在的风险，可以通过设置 &lt;code>persist-credentials: false&lt;/code> 来主动删除这些凭证信息。这一步骤确保了即使代码库中存在敏感操作，也不会因为误用或泄露令牌而引发安全问题。&lt;/li>
&lt;li>&lt;strong>最小化权限配置&lt;/strong>：在 GitHub Actions 的工作流文件中，可以使用 &lt;code>permissions&lt;/code> 块来显式声明每个步骤所需的权限。通过这种方式，可以确保每个作业只拥有完成任务所必需的最低权限。例如，如果某个作业只需要读取仓库内容，则不应授予其写入权限。这种做法不仅减少了不必要的权限暴露，还降低了因权限滥用而导致的安全风险。&lt;/li>
&lt;li>&lt;strong>隔离敏感操作&lt;/strong>：为了进一步提升安全性，建议将签出代码的操作与任何涉及写入的操作分离到不同的作业（job）中。这样做可以有效防止在同一环境中同时执行读取和写入操作，从而减少意外修改或恶意攻击的可能性。通过将不同类型的任务分隔开，可以更好地控制和监控每个作业的行为，确保整个工作流的安全性和稳定性。&lt;/li>
&lt;/ol>
&lt;p>通过以上这些方法，不仅可以提高 GitHub Actions 的安全性，还能帮助开发者更清晰地管理和控制各个作业之间的权限和操作，从而构建更加健壮和可靠的自动化流程。&lt;/p>
&lt;h1 id="workflow_run">WorkFlow_Run
&lt;/h1>&lt;p>在官方的一篇文章中，官方提供了一种解决办法,而且给出的示例也刚好符合实现在PR发送评论的需求&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/" target="_blank" rel="noopener"
>https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/&lt;/a>&lt;/p>
&lt;p>与&lt;code>pull_request_target&lt;/code>一起，引入了一个新的触发器&lt;code>workflow_run&lt;/code>，以支持需要构建不受信任的代码并且还需要写入权限来更新 PR（例如代码覆盖率结果或其他测试结果）的方案。要以安全的方式执行此作，必须通过 &lt;code>pull_request&lt;/code> 触发器处理不受信任的代码，以便将其隔离在非特权环境中。然后，处理 PR 的工作流应将任何结果（如代码覆盖率或失败/通过的测试）存储在构件中并退出。然后，以下工作流程从 &lt;code>workflow_run&lt;/code> 开始，在该位置被授予对目标存储库的写入权限和对存储库密钥的访问权限，以便它可以下载项目并对存储库进行任何必要的修改，或与需要存储库密钥（例如 API 令牌）的第三方服务交互。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这里用的是官方的一个示例，其中分别有两个工作流，关键注意这两个工作流的触发事件一个是&lt;code>pull_request&lt;/code>一个是&lt;code>workflow_run&lt;/code>&lt;/p>
&lt;p>当贡献者提交PR时，会触发相应的CI流程。由于&lt;code>Receive PR&lt;/code>工作流使用的是&lt;code>pull_request&lt;/code>事件，默认情况下无法访问机密信息且不具备写入权限。该工作流运行完毕后，会将处理结果及PR编号存储在构件中。随后，&lt;code>workflow_run&lt;/code>检测到&lt;code>Receive PR&lt;/code>工作流已结束，于是触发该工作流并开始执行其定义的任务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">name: Receive PR
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># read-only repo token&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># no access to secrets&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pull_request:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> build:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: actions/checkout@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># imitation of a build process&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: /bin/bash ./build.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Save PR number
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mkdir -p ./pr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">{ github.event.number &lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="o">}&lt;/span> &amp;gt; ./pr/NR
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: actions/upload-artifact@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: pr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> path: pr/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Comment on the pull request&lt;/code>工作流将&lt;code>Receive PR&lt;/code>的构件下载回来，然后根据PR号对相应的PR发送评论&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">name: Comment on the pull request
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># read-write repo token&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># access to secrets&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> workflow_run:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> workflows: &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;Receive PR&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> types:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - completed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> upload:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>: &amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> github.event.workflow_run.event &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;pull_request&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> github.event.workflow_run.conclusion &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;success&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: &lt;span class="s1">&amp;#39;Download artifact&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/github-script@v3.1.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> script: &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var &lt;span class="nv">artifacts&lt;/span> &lt;span class="o">=&lt;/span> await github.actions.listWorkflowRunArtifacts&lt;span class="o">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> owner: context.repo.owner,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repo: context.repo.repo,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run_id: &lt;span class="si">${&lt;/span>&lt;span class="p">{github.event.workflow_run.id &lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="o">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">})&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var &lt;span class="nv">matchArtifact&lt;/span> &lt;span class="o">=&lt;/span> artifacts.data.artifacts.filter&lt;span class="o">((&lt;/span>artifact&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span>&amp;gt; &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> artifact.name &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;pr&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">})[&lt;/span>0&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var &lt;span class="nv">download&lt;/span> &lt;span class="o">=&lt;/span> await github.actions.downloadArtifact&lt;span class="o">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> owner: context.repo.owner,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repo: context.repo.repo,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> artifact_id: matchArtifact.id,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> archive_format: &lt;span class="s1">&amp;#39;zip&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">})&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var &lt;span class="nv">fs&lt;/span> &lt;span class="o">=&lt;/span> require&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fs.writeFileSync&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;${{github.workspace}}/pr.zip&amp;#39;&lt;/span>, Buffer.from&lt;span class="o">(&lt;/span>download.data&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - run: unzip pr.zip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: &lt;span class="s1">&amp;#39;Comment on PR&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/github-script@v3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> github-token: &lt;span class="si">${&lt;/span>&lt;span class="p">{ secrets.GITHUB_TOKEN &lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> script: &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var &lt;span class="nv">fs&lt;/span> &lt;span class="o">=&lt;/span> require&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var &lt;span class="nv">issue_number&lt;/span> &lt;span class="o">=&lt;/span> Number&lt;span class="o">(&lt;/span>fs.readFileSync&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;./NR&amp;#39;&lt;/span>&lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> await github.issues.createComment&lt;span class="o">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> owner: context.repo.owner,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repo: context.repo.repo,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> issue_number: issue_number,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body: &lt;span class="s1">&amp;#39;Everything is OK. Thank you for the PR!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">})&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;aside> 💡
&lt;p>有关题目或文章的问题，欢迎您在底部评论区留言，一起交流~&lt;/p>
&lt;/aside></description></item><item><title>My First Post</title><link>https://hydevcode.github.io/p/my-first-post/</link><pubDate>Fri, 14 Mar 2025 21:13:57 +0800</pubDate><guid>https://hydevcode.github.io/p/my-first-post/</guid><description>&lt;p>这是第一篇文章，讲一讲该博客的情况&lt;/p>
&lt;p>这个博客主要用于记录随笔笔记之类的，而整理好的文章会发到notion那边去&lt;/p></description></item><item><title>存档</title><link>https://hydevcode.github.io/archives/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://hydevcode.github.io/archives/</guid><description/></item><item><title>参考</title><link>https://hydevcode.github.io/%E5%8F%82%E8%80%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hydevcode.github.io/%E5%8F%82%E8%80%83/</guid><description/></item><item><title>关于</title><link>https://hydevcode.github.io/%E5%85%B3%E4%BA%8E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hydevcode.github.io/%E5%85%B3%E4%BA%8E/</guid><description>&lt;p>This is a test page for i18n support.&lt;/p></description></item><item><title>链接</title><link>https://hydevcode.github.io/%E9%93%BE%E6%8E%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hydevcode.github.io/%E9%93%BE%E6%8E%A5/</guid><description>&lt;p>To use this feature, add &lt;code>links&lt;/code> section to frontmatter.&lt;/p>
&lt;p>This page&amp;rsquo;s frontmatter:&lt;/p>
&lt;p>&lt;code>image&lt;/code> field accepts both local and external images.&lt;/p></description></item><item><title>搜索</title><link>https://hydevcode.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hydevcode.github.io/search/</guid><description/></item></channel></rss>